export default function App() {
  const navigation = useNavigation();
  const [hasCameraPermission, setHasCameraPermission] = useState(null);
  const [camera, setCamera] = useState(null);
 
  const [type, setType] = useState(Camera.Constants.Type.back);
  const {setImage, image}=useContext(RegistroContext)
useEffect(() => {
    (async () => {
      const cameraStatus = await Camera.requestCameraPermissionsAsync();
      setHasCameraPermission(cameraStatus.status === 'granted');
})();
  }, []);
const takePicture = async () => {
    if(camera){
        const data = await camera.takePictureAsync(null)
        setImage(data.uri);
        console.log('DATA PIC', data.uri)
    }
  }

  if (hasCameraPermission === false) {
    return <Text>No access to camera</Text>;
  }
  return (
   <View style={{ flex: 1}}>

<View style={styles.container}>
      <Camera style={styles.camera} ref={ref => setCamera(ref)} type={type}>
        <View style={styles.buttonContainer}>
        <TouchableOpacity style={styles.button} onPress={() => {
        try {
          takePicture()
          
        } catch (error) {
          console.log(error)
        }}
        
      }/>
            
        </View>
      </Camera>
    </View>

     {/*  <View style={styles.cameraContainer}>
            <Camera 
            ref={ref => setCamera(ref)}
            style={styles.fixedRatio} 
            type={type}
            ratio={'1:1'} >
              <View style={styles.buttonContainer}>
             <TouchableOpacity style={styles.button} onPress={() => {
        try {
          takePicture()
          
        } catch (error) {
          console.log(error)
        }}
        
      }>
            <Text style={styles.text}>Tomar foto</Text>
             </TouchableOpacity>
            </View>  </Camera>
      </View>
 */}
      {/* <Button title="Take Picture" onPress={() => {
        try {
          takePicture()
          
        } catch (error) {
          console.log(error)
        }}
        
      } /> */}


      
      {image && <Image source={{uri: image}} style={{flex:1}}/>}  
      <Button title="Enviar" onPress={()=>(navigation.navigate('datosRegistroAsistencia'))}></Button>
      <Button
            title="Flip Image"
            onPress={() => {
              setType(
                type === Camera.Constants.Type.back
                  ? Camera.Constants.Type.front
                  : Camera.Constants.Type.back
              );
            }}>
        </Button>
      {image && <Image source={{uri: image}} style={{flex:1}}/>}  
   </View>
  );
}
const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
  camera: {
    flex: 1,
  },
  cameraContainer: {
      flex: 1,
      flexDirection: 'row'
  },
  fixedRatio:{
      flex: 1,
      aspectRatio: 1
  },  buttonContainer: {
    flex: 1,
    flexDirection: 'row',
    backgroundColor: 'transparent',
    margin: 64,
  },
  button: {
    flex: 1,
    alignSelf: 'flex-end',
    alignItems: 'center',
      width: 70,
      height: 70,
      bottom: 0,
      borderRadius: 50,
      backgroundColor: '#fff'
      
  },
  text: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
  }
})